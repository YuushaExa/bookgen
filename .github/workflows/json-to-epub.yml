name: JSON → EPUB

on:
  workflow_dispatch:
    inputs:
      json_url:
        description: "URL of the JSON file (array of {title, content})"
        required: true
        type: string
      cover_url:
        description: "URL of the cover image"
        required: true
        type: string
      output_filename:
        description: "Name of the .epub file (no extension)"
        default: "book"
        required: false
        type: string
      title:
        description: "Book title (metadata)"
        default: "My Book"
        required: false
        type: string
      author:
        description: "Book author (metadata)"
        default: "Anonymous"
        required: false
        type: string
      description:
        description: "Book description (metadata)"
        default: "Generated from JSON via GitHub Actions"
        required: false
        type: string
      status:
        description: "Book status (Completed / Ongoing / etc.)"
        default: "Unknown"
        required: false
        type: string
      genres:
        description: "Comma-separated list of genres"
        default: ""
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install epub-gen axios

      - name: Build EPUB in results folder
        run: |
          mkdir -p results
          node <<'JS'
          import axios from 'axios';
          import Epub from 'epub-gen';
          import { Buffer } from 'buffer';
          import fs from 'fs';
          import path from 'path';

          const jsonUrl = process.env.JSON_URL;
          const safeName = process.env.OUTPUT_FILENAME.replace(/\s+/g, '-');
          const outputFile = `results/${safeName}.epub`;

          // Improved download helper with error handling
          const downloadImage = async (url) => {
              try {
                  const response = await axios.get(url, { responseType: 'arraybuffer' });
                  const extension = url.split('.').pop().split('?')[0].toLowerCase();
                  const validExtensions = ['jpg', 'jpeg', 'png', 'gif', 'webp'];
                  const fileExt = validExtensions.includes(extension) ? extension : 'jpg';
                  
                  return {
                      data: response.data,
                      contentType: response.headers['content-type'] || `image/${fileExt}`,
                      extension: fileExt
                  };
              } catch (error) {
                  console.error('Error downloading cover image:', error.message);
                  return null;
              }
          };

          // Process inputs
          const novelInfo = {
              title: process.env.BOOK_TITLE,
              author: process.env.BOOK_AUTHOR,
              description: process.env.BOOK_DESC,
              status: process.env.BOOK_STATUS || 'Unknown',
              genres: (process.env.BOOK_GENRES || '').split(',').map(g => g.trim()).filter(Boolean)
          };

          // Download cover if exists
          let coverImage = null;
          if (process.env.COVER_URL) {
              coverImage = await downloadImage(process.env.COVER_URL);
              if (!coverImage) {
                  console.warn('Proceeding without cover image');
              }
          }

          // Get chapters
          const { data: chapters } = await axios.get(jsonUrl);
          const story = chapters.map(c => ({
              title: c.title,
              data: c.content.replace(/\\n/g, '\n')
                            .replace(/\n{2,}/g, '\n\n')
                            .split(/\n{2,}/)
                            .map(p => `<p>${p.trim()}</p>`)
                            .join('\n')
          }));

          // EPUB options
          const options = {
              title: novelInfo.title,
              author: novelInfo.author,
              description: novelInfo.description,
              publisher: "GitHub Actions",
              content: [
                  {
                      title: 'Cover',
                      data: coverImage ? `
                      <!DOCTYPE html>
                      <html xmlns="http://www.w3.org/1999/xhtml">
                          <head>
                              <title>Cover</title>
                              <style>
                                  body { 
                                      margin: 0; 
                                      padding: 0; 
                                      text-align: center; 
                                      height: 100vh;
                                      display: flex;
                                      flex-direction: column;
                                      justify-content: center;
                                  }
                                  img { 
                                      max-height: 100%; 
                                      max-width: 100%; 
                                      object-fit: contain;
                                      margin: 0 auto;
                                  }
                              </style>
                          </head>
                          <body>
                              <img src="images/cover.${coverImage.extension}" alt="Book Cover"/>
                          </body>
                      </html>` : `
                      <!DOCTYPE html>
                      <html xmlns="http://www.w3.org/1999/xhtml">
                          <head>
                              <title>Cover</title>
                              <style>
                                  body { 
                                      margin: 0; 
                                      padding: 2em; 
                                      text-align: center;
                                  }
                              </style>
                          </head>
                          <body>
                              <h1>${novelInfo.title}</h1>
                              <h2>by ${novelInfo.author}</h2>
                          </body>
                      </html>`,
                      beforeToc: true,
                      filename: 'cover.xhtml'
                  },
                  {
                      title: 'Information',
                      data: `
                      <h1>${novelInfo.title}</h1>
                      <h2>by ${novelInfo.author}</h2>
                      <p><strong>Status:</strong> ${novelInfo.status}</p>
                      ${novelInfo.genres.length ? `<p><strong>Genres:</strong> ${novelInfo.genres.join(', ')}</p>` : ''}
                      <h3>Description</h3>
                      <p>${novelInfo.description}</p>
                      `,
                      beforeToc: true,
                      filename: 'info.xhtml'
                  },
                  ...story
              ],
              assets: coverImage ? [{
                  name: `images/cover.${coverImage.extension}`,
                  data: Buffer.from(coverImage.data),
                  type: coverImage.contentType
              }] : []
          };

          try {
              await new Epub(options, outputFile).promise;
              console.log(`✅ Successfully created ${outputFile}`);
          } catch (error) {
              console.error('Error generating EPUB:', error);
              process.exit(1);
          }
          JS
        env:
          JSON_URL: ${{ github.event.inputs.json_url }}
          OUTPUT_FILENAME: ${{ github.event.inputs.output_filename }}
          COVER_URL: ${{ github.event.inputs.cover_url }}
          BOOK_TITLE: ${{ github.event.inputs.title }}
          BOOK_AUTHOR: ${{ github.event.inputs.author }}
          BOOK_DESC: ${{ github.event.inputs.description }}
          BOOK_STATUS: ${{ github.event.inputs.status || 'Unknown' }}
          BOOK_GENRES: ${{ github.event.inputs.genres || '' }}

      - name: Commit and push results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add results
          git commit -m "Add generated EPUB: ${{ github.event.inputs.output_filename || 'book' }}" || echo "No changes to commit"
          git push
