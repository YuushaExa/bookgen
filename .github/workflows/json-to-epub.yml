name: JSON → EPUB

on:
  workflow_dispatch:
    inputs:
      json_url:
        description: "URL of the JSON file (array of {title, content})"
        required: true
        type: string
      cover_url:
        description: "URL of the cover image"
        required: true
        type: string
      output_filename:
        description: "Name of the .epub file (no extension)"
        default: "book"
        required: false
        type: string
      title:
        description: "Book title (metadata)"
        default: "My Book"
        required: false
        type: string
      author:
        description: "Book author (metadata)"
        default: "Anonymous"
        required: false
        type: string
      description:
        description: "Book description (metadata)"
        default: "Generated from JSON via GitHub Actions"
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install epub-gen axios

      - name: Download cover image
        run: curl -L -o cover.jpg "${{ github.event.inputs.cover_url }}"

      - name: Build EPUB in results folder
        run: |
          mkdir -p results
          node <<'JS'
          import axios from 'axios';
          import Epub from 'epub-gen';
          import fs from 'fs';

          const jsonUrl    = process.env.JSON_URL;
          const coverFile  = 'cover.jpg';
          const outputFile = `results/${process.env.OUTPUT_FILENAME}.epub`;
          const bookTitle  = process.env.BOOK_TITLE;
          const bookAuthor = process.env.BOOK_AUTHOR;
          const bookDesc   = process.env.BOOK_DESC;

          const { data: chapters } = await axios.get(jsonUrl);

          const content = chapters.map(c => {
            // 1. turn \\n ➜ \n
            let raw = c.content.replace(/\\n/g, '\n');
            // 2. collapse multiple newlines to one blank line
            raw = raw.replace(/\n{2,}/g, '\n\n');
            // 3. split by blank line, wrap each block in <p>
            const paragraphs = raw
              .split(/\n{2,}/)
              .map(p => `<p>${p.trim()}</p>`)
              .join('\n');
            return { title: c.title, data: paragraphs };
          });

          const options = {
            title:       bookTitle,
            author:      bookAuthor,
            description: bookDesc,
            cover:       coverFile,
            content
          };

          await new Epub(options, outputFile).promise;
          console.log(`✅ Created ${outputFile}`);
          JS
        env:
          JSON_URL:        ${{ github.event.inputs.json_url }}
          OUTPUT_FILENAME: ${{ github.event.inputs.output_filename }}
          BOOK_TITLE:      ${{ github.event.inputs.title }}
          BOOK_AUTHOR:     ${{ github.event.inputs.author }}
          BOOK_DESC:       ${{ github.event.inputs.description }}
      - name: Commit and push results
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add results
          git commit -m "Add generated" || echo "No changes to commit"
          git push
